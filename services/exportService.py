from fastapi import FastAPI, Request
from fastapi.templating import Jinja2Templates
import json
import io
from pyppeteer import launch
from fastapi import Request, HTTPException

templates = Jinja2Templates(directory="templates")
import traceback



async def render_pdf_with_puppeteer(html_content: str):
    try:
        print("Launching headless browser...")
        # Launch a headless browser
        chromium_executable_path = "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
        browser = await launch(headless=True, executablePath=chromium_executable_path, args=['--no-sandbox'])
        print("Browser launched.")

        page = await browser.newPage()
        print("New page created.")

        # Load the rendered HTML
        print("Setting page content...")
        await page.setContent(html_content)

        # Wait for the JavaScript chart or any specific element to load
        # Example: Wait for an element with a class "chart-container" to appear
        print("Waiting for chart to load...")
        await page.waitForSelector('body', {'timeout': 90000})  # Adjust the selector and timeout as needed
        await page.waitForFunction('document.readyState === "complete"')
        print("Chart loaded.")

        # Generate the PDF
        print("Generating PDF...")
        pdf_file = await page.pdf({
            'format': 'A4',
            'printBackground': True,
            'margin': {'top': '5mm', 'bottom': '5mm', 'left': '5mm', 'right': '5mm'},
            'preferCSSPageSize': True
        })
        print("PDF generated.")

        await browser.close()
        print("Browser closed.")
        return pdf_file

    except Exception as e:
        # Log the error and the traceback for debugging
        print(f"Error occurred: {e}")
        print("Traceback:")
        traceback.print_exc()

        # Optionally, raise the error to propagate it further
        raise Exception("An error occurred while generating the PDF with Puppeteer.")



async def dashboard_pdf(request: Request):
    try:
        print("Loading data from JSON...")
        # Load data from JSON
        with open('descriptive_dashboard_output.json') as f:
            data = json.load(f)
        print("Data loaded.")

        # Render HTML template with data
        print("Rendering HTML template with data...")
        template_response = templates.TemplateResponse("chart.html", {"request": request, "data": data})
        print("HTML template rendered.")

        # No need to manually call render(), just return the template_response directly
        # Fetch the HTML content generated by TemplateResponse
        rendered_html =  template_response.body.decode('utf-8')  # Automatically fetch the body content
        print("HTML content generated.")

        # Generate PDF using Puppeteer
        print("Calling render_pdf_with_puppeteer...")
        pdf_file = await render_pdf_with_puppeteer(rendered_html)  # Decode bytes to string
        print("PDF file generated.")

        # Return the PDF file as a BytesIO object
        print("Returning PDF as BytesIO...")
        return io.BytesIO(pdf_file)
    except Exception as e:
        # Log the error and traceback for debugging
        print(f"Error occurred: {e}")
        print("Traceback:")
        traceback.print_exc()

        # Raise an HTTPException for a proper error response
        raise HTTPException(status_code=500, detail="Internal Server Error")
